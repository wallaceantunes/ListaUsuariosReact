[{"C:\\projetos\\desafio-zukk\\src\\index.js":"1","C:\\projetos\\desafio-zukk\\src\\reportWebVitals.js":"2","C:\\projetos\\desafio-zukk\\src\\ui\\screens\\loginScreen\\Login.js":"3","C:\\projetos\\desafio-zukk\\src\\ui\\screens\\listScreen\\List.js":"4","C:\\projetos\\desafio-zukk\\src\\ui\\screens\\createScreen\\Create.js":"5","C:\\projetos\\desafio-zukk\\src\\router.js":"6","C:\\projetos\\desafio-zukk\\src\\api\\loginApi.js":"7","C:\\projetos\\desafio-zukk\\src\\config\\config.js":"8","C:\\projetos\\desafio-zukk\\src\\store\\store.js":"9","C:\\projetos\\desafio-zukk\\src\\ui\\components\\privateRoute.js":"10","C:\\projetos\\desafio-zukk\\src\\api\\clientApi.js":"11","C:\\projetos\\desafio-zukk\\src\\ui\\screens\\editScreen\\Edit.js":"12","C:\\projetos\\desafio-zukk\\src\\api\\cepApi.js":"13","C:\\projetos\\desafio-zukk\\src\\ui\\components\\map.js":"14"},{"size":740,"mtime":1611259599719,"results":"15","hashOfConfig":"16"},{"size":362,"mtime":499162500000,"results":"17","hashOfConfig":"16"},{"size":2142,"mtime":1611251779999,"results":"18","hashOfConfig":"16"},{"size":6264,"mtime":1611254263061,"results":"19","hashOfConfig":"16"},{"size":5990,"mtime":1611260097310,"results":"20","hashOfConfig":"16"},{"size":836,"mtime":1611253861409,"results":"21","hashOfConfig":"16"},{"size":206,"mtime":1611241350401,"results":"22","hashOfConfig":"16"},{"size":47,"mtime":1611238428782,"results":"23","hashOfConfig":"16"},{"size":394,"mtime":1611250280751,"results":"24","hashOfConfig":"16"},{"size":409,"mtime":1611248310672,"results":"25","hashOfConfig":"16"},{"size":843,"mtime":1611254020519,"results":"26","hashOfConfig":"16"},{"size":6128,"mtime":1611256806966,"results":"27","hashOfConfig":"16"},{"size":256,"mtime":1611256510640,"results":"28","hashOfConfig":"16"},{"size":693,"mtime":1611260590978,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"tiyc25",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"32"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\projetos\\desafio-zukk\\src\\index.js",[],["60","61"],"C:\\projetos\\desafio-zukk\\src\\reportWebVitals.js",[],"C:\\projetos\\desafio-zukk\\src\\ui\\screens\\loginScreen\\Login.js",[],"C:\\projetos\\desafio-zukk\\src\\ui\\screens\\listScreen\\List.js",[],"C:\\projetos\\desafio-zukk\\src\\ui\\screens\\createScreen\\Create.js",[],"C:\\projetos\\desafio-zukk\\src\\router.js",[],"C:\\projetos\\desafio-zukk\\src\\api\\loginApi.js",[],"C:\\projetos\\desafio-zukk\\src\\config\\config.js",[],"C:\\projetos\\desafio-zukk\\src\\store\\store.js",[],"C:\\projetos\\desafio-zukk\\src\\ui\\components\\privateRoute.js",[],"C:\\projetos\\desafio-zukk\\src\\api\\clientApi.js",[],"C:\\projetos\\desafio-zukk\\src\\ui\\screens\\editScreen\\Edit.js",["62"],"import React, { useState, useEffect } from 'react';\r\nimport './Edit.css';\r\nimport { Navbar, Container, Col, Button, Form } from 'react-bootstrap';\r\nimport { editClient } from '../../../api/clientApi'\r\nimport { getCep } from '../../../api/cepApi'\r\nimport SweetAlert from 'sweetalert2-react';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nfunction Edit(props) {\r\n    const history = useHistory()\r\n    const [show, setShow] = useState(false)\r\n    const [cep, setCep] = useState('')\r\n    const [name, setName] = useState('')\r\n    const [email, setEmail] = useState('')\r\n    const [phone, setPhone] = useState('')\r\n    const [addressStreet, setAddressStreet] = useState('')\r\n    const [neighborhood, setNeighborhood] = useState('')\r\n    const [city, setCity] = useState('')\r\n    const [uf, setUf] = useState('')\r\n    useEffect(()=>{\r\n        setName(props.location.state.client.name)\r\n        setEmail(props.location.state.client.email)\r\n        setPhone(props.location.state.client.phone)\r\n        setAddressStreet(props.location.state.client.address.address)\r\n        setNeighborhood(props.location.state.client.address.neighborhood)\r\n        setCity(props.location.state.client.address.city)\r\n        setUf(props.location.state.client.address.uf)\r\n    }, [])\r\n    const edit = async () => {\r\n        try {\r\n            const address = {\r\n                address: addressStreet,\r\n                neighborhood,\r\n                city,\r\n                uf\r\n            }\r\n            await editClient(props.location.state.client.id, name, email, phone, address)\r\n            history.push('/lista')\r\n        } catch (error) {\r\n            setShow(true)\r\n        }\r\n    }\r\n    const getAddrresByCep = async (cep) => {\r\n        try {\r\n            const resp = await getCep(cep)\r\n            setAddressStreet(resp.data.logradouro)\r\n            setNeighborhood(resp.data.bairro)\r\n            setCity(resp.data.cidade.nome)\r\n            setUf(resp.data.estado.sigla)\r\n        } catch (error) {\r\n            \r\n        }\r\n    }\r\n    useEffect(()=>{\r\n        if(/^\\d{5}\\d{3}$/.test(cep)){\r\n            getAddrresByCep(cep)\r\n        }\r\n    }, [cep])\r\n    return (\r\n        <div className=\"edit\">\r\n            <Navbar className=\"border-navbar\" bg=\"light\">\r\n                <Navbar.Brand>\r\n                    <img src=\"zukk-logo.png\" alt=\"logo\" />\r\n                </Navbar.Brand>\r\n            </Navbar>\r\n            <Container fluid>\r\n                <Form>\r\n                    <Form.Row>\r\n                        <Col md={4}>\r\n                            <Form.Group controlId=\"name\">\r\n                                <Form.Label>Nome</Form.Label>\r\n                                <Form.Control type=\"text\" value={name} onChange={(ev) => setName(ev.target.value)} />\r\n                            </Form.Group>\r\n                        </Col>\r\n                        <Col md={4}>\r\n                            <Form.Group controlId=\"email\">\r\n                                <Form.Label>Email</Form.Label>\r\n                                <Form.Control type=\"email\" value={email} onChange={(ev) => setEmail(ev.target.value)} />\r\n                            </Form.Group>\r\n                        </Col>\r\n                        <Col md={4}>\r\n                            <Form.Group controlId=\"phone\">\r\n                                <Form.Label>Telefone</Form.Label>\r\n                                <Form.Control type=\"text\" value={phone} onChange={(ev) => setPhone(ev.target.value)} />\r\n                            </Form.Group>\r\n                        </Col>\r\n                    </Form.Row>\r\n                    <Form.Row>\r\n                        <Col md={4}>\r\n                            <Form.Group controlId=\"cep\">\r\n                                <Form.Label>Cep</Form.Label>\r\n                                <Form.Control type=\"text\" value={cep} onChange={(ev) => setCep(ev.target.value)} />\r\n                            </Form.Group>\r\n                        </Col>\r\n                        <Col md={8}>\r\n                            <Form.Group controlId=\"endereco\">\r\n                                <Form.Label>Endere√ßo</Form.Label>\r\n                                <Form.Control type=\"text\" value={addressStreet} onChange={(ev) => setAddressStreet(ev.target.value)} />\r\n                            </Form.Group>\r\n                        </Col>\r\n                    </Form.Row>\r\n                    <Form.Row>\r\n                        <Col md={4}>\r\n                            <Form.Group controlId=\"bairro\">\r\n                                <Form.Label>Bairro</Form.Label>\r\n                                <Form.Control type=\"text\" value={neighborhood} onChange={(ev) => setNeighborhood(ev.target.value)} />\r\n                            </Form.Group>\r\n                        </Col>\r\n                        <Col md={4}>\r\n                            <Form.Group controlId=\"cidade\">\r\n                                <Form.Label>Cidade</Form.Label>\r\n                                <Form.Control type=\"text\" value={city} onChange={(ev) => setCity(ev.target.value)} />\r\n                            </Form.Group>\r\n                        </Col>\r\n                        <Col md={4}>\r\n                            <Form.Group controlId=\"uf\">\r\n                                <Form.Label>UF</Form.Label>\r\n                                <Form.Control type=\"text\" value={uf} onChange={(ev) => setUf(ev.target.value)} />\r\n                            </Form.Group>\r\n                        </Col>\r\n                    </Form.Row>\r\n                    <Form.Row>\r\n                        <Col md={{ span: 2, offset: 10 }}>\r\n                            <Button variant=\"primary\" block onClick={() => edit()}>Editar</Button>\r\n                        </Col>\r\n                    </Form.Row>\r\n                </Form>\r\n            </Container>\r\n            <SweetAlert\r\n                show={show}\r\n                title=\"Error\"\r\n                text=\"Usu√°rio n√£o encontrado\"\r\n                confirmButtonColor=\"#d33\"\r\n                onConfirm={() => setShow(false)}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Edit;\r\n","C:\\projetos\\desafio-zukk\\src\\api\\cepApi.js",[],"C:\\projetos\\desafio-zukk\\src\\ui\\components\\map.js",["63","64"],{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","severity":1,"message":"70","line":28,"column":8,"nodeType":"71","endLine":28,"endColumn":10,"suggestions":"72"},{"ruleId":"73","severity":1,"message":"74","line":1,"column":17,"nodeType":"75","messageId":"76","endLine":1,"endColumn":26},{"ruleId":"73","severity":1,"message":"77","line":2,"column":43,"nodeType":"75","messageId":"76","endLine":2,"endColumn":48},"no-native-reassign",["78"],"no-negated-in-lhs",["79"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'props.location.state.client.address.address', 'props.location.state.client.address.city', 'props.location.state.client.address.neighborhood', 'props.location.state.client.address.uf', 'props.location.state.client.email', 'props.location.state.client.name', and 'props.location.state.client.phone'. Either include them or remove the dependency array. If 'setName' needs the current value of 'props.location.state.client.name', you can also switch to useReducer instead of useState and read 'props.location.state.client.name' in the reducer.","ArrayExpression",["80"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'Popup' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"81","fix":"82"},"Update the dependencies array to be: [props.location.state.client.address.address, props.location.state.client.address.city, props.location.state.client.address.neighborhood, props.location.state.client.address.uf, props.location.state.client.email, props.location.state.client.name, props.location.state.client.phone]",{"range":"83","text":"84"},[1258,1260],"[props.location.state.client.address.address, props.location.state.client.address.city, props.location.state.client.address.neighborhood, props.location.state.client.address.uf, props.location.state.client.email, props.location.state.client.name, props.location.state.client.phone]"]